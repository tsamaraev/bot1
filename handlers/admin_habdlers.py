from datetime import datetime, timedelta

from aiogram import Router, F
from aiogram.filters import Command, ChatMemberUpdatedFilter, JOIN_TRANSITION, IS_ADMIN
from aiogram.types import Message, CallbackQuery, ChatMemberUpdated, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from database import SessionLocal, Groups, UserPayments
from utils.constants import ADMIN_ID
from states.state import RegGroup
from keyboards import backToAdminMenu, makeMainAdminMenu, makeAdminSubscriptionMenu

router = Router()


@router.message(Command('admin'))
async def cmd_admin(message: Message):
    if message.from_user.id in ADMIN_ID and message.chat.type == "private":
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=makeMainAdminMenu())


@router.callback_query(F.data.startswith("adduser_"))
async def add_user_group(callback_query: CallbackQuery):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–∫—Ä—ã—Ç—É—é –≥—Ä—É–ø–ø—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∫–∏."""
    user_id = int(callback_query.data.split("_")[1])
    group_id = callback_query.data.split("_")[2]

    with SessionLocal() as db_session:
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ –ø–ª–∞—Ç–µ–∂–µ
            payment = db_session.query(UserPayments).filter_by(user_id=user_id, group_id=group_id).first()
            if not payment:
                await callback_query.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–æ–ø–ª–∞—á–µ–Ω" –∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            subscription_end_date = datetime.now() + timedelta(days=30)  # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π
            payment.status = "–æ–ø–ª–∞—á–µ–Ω"
            payment.subscription_end_date = subscription_end_date
            db_session.commit()

            # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
            expire_time = datetime.now() + timedelta(hours=24)  # –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ 24 —á–∞—Å–∞
            try:
                new_invite_link = await callback_query.bot.create_chat_invite_link(
                    group_id, expire_date=expire_time, member_limit=1
                )
                invite_url = new_invite_link.invite_link

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await callback_query.bot.send_message(
                    chat_id=user_id,
                    text=(
                        f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É \"{group_id}\". "
                        f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {subscription_end_date.strftime('%d.%m.%Y %H:%M')}.\n"
                        f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è: {invite_url}"
                    )
                )
            except Exception:
                # –ï—Å–ª–∏ `user_id` –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                await callback_query.message.answer(
                    text=(
                        f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n"
                        f"üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {payment.phone_number}"
                    )
                )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await callback_query.message.answer(
                text=f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É."
            )

        except Exception as e:
            db_session.rollback()
            await callback_query.message.answer(
                text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}"
            )
        finally:
            db_session.close()


@router.callback_query(F.data == "add_bot_to_group")
async def reg_name(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(RegGroup.name)
    await callback_query.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:")


group_data = {}


@router.message(RegGroup.name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)

    data = await state.get_data()
    group_name = data.get("name")
    group_data[message.from_user.id] = {
        "name": group_name,
    }
    await state.set_state(RegGroup.group_id)
    bot_username = (await message.bot.get_me()).username
    invite_link = f"https://t.me/{bot_username}?startgroup=true"
    await message.answer(
        f"–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É: \n\n{invite_link}"
    )


@router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=JOIN_TRANSITION))
async def bot_added(event: ChatMemberUpdated):
    if event.from_user.id in ADMIN_ID:
        group_name = group_data.get(event.from_user.id, {}).get('name')
        group_id = event.chat.id

        db = SessionLocal()
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–∞ –≥—Ä—É–ø–ø–∞ –≤ –±–∞–∑–µ
            existing_group = db.query(Groups).filter_by(group_id=group_id).first()
            if existing_group:
                await event.bot.send_message(
                    chat_id=ADMIN_ID[0],
                    text=f"‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É '{existing_group.group_name}' (ID: {group_id})."
                )
                return  # –í—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –Ω–µ –≤—Å—Ç–∞–≤–ª—è—Ç—å –¥—É–±–ª–∏–∫–∞—Ç

            # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–æ–≤–∞—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
            new_group = Groups(
                group_name=group_name,
                group_id=group_id
            )
            db.add(new_group)
            db.commit()
            await event.bot.send_message(
                chat_id=ADMIN_ID[0],
                text=(
                    f"‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É!\n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: {group_name}\n"
                )
            )
        except Exception as e:
            db.rollback()
            await event.bot.send_message(
                chat_id=ADMIN_ID[0],
                text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø—ã: {str(e)}"
            )
            await event.bot.leave_chat(chat_id=group_id)
        finally:
            db.close()



@router.callback_query(F.data == "all_groups")
async def show_groups(callback_query: CallbackQuery):
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        groups = db.query(Groups).all()
        if groups:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø
            group_list = "\n".join(
                [
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {group.group_name}\nID: {group.group_id}\n"
                    for group in groups
                ]
            )
            await callback_query.message.edit_text(
                text=f"–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø:\n\n{group_list}",
                reply_markup=backToAdminMenu()
            )
        else:
            await callback_query.message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –≥—Ä—É–ø–ø.")
    except Exception as e:
        await callback_query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        db.close()


@router.callback_query(F.data == 'backToAdminMenu')
async def adminMenu(callback_query: CallbackQuery):
    await callback_query.message.edit_text(
        text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=makeMainAdminMenu()
    )


@router.callback_query(F.data.startswith("extend_subscription_"))
async def extend_subscription(callback_query: CallbackQuery):
    user_id = int(callback_query.data.split("_")[2])

    with SessionLocal() as db_session:
        payment = db_session.query(UserPayments).filter_by(user_id=user_id).first()

        if payment:
            payment.subscription_end_date += timedelta(days=30)
            db_session.commit()

            await callback_query.message.edit_text(
                text=f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ –º–µ—Å—è—Ü."
            )
            await callback_query.bot.send_message(
                chat_id=user_id,
                text="‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞ 1 –º–µ—Å—è—Ü!"
            )
        else:
            await callback_query.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@router.callback_query(F.data == "manage_subscriptions")
async def manage_subscriptions(callback_query: CallbackQuery):
    with SessionLocal() as db_session:
        now = datetime.now()
        expiring_users = db_session.query(UserPayments).filter(
            UserPayments.subscription_end_date <= now + timedelta(days=7),
            UserPayments.status == "–æ–ø–ª–∞—á–µ–Ω"
        ).all()
        print(expiring_users)
        if expiring_users:
            await callback_query.message.edit_text(
                text="üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏:",
                reply_markup=makeAdminSubscriptionMenu(expiring_users)
            )
        else:
            await callback_query.message.edit_text("‚ÑπÔ∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏.")