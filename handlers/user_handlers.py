import asyncio

from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ChatMemberUpdated, ReplyKeyboardMarkup, KeyboardButton
from states.state import CourseRegistration
from utils.constants import START_MESSAGE
from keyboards import generateKeyboard, inline_menu, getmyGroupes, finish_course, add_user_keyboard
from database import SessionLocal, UserPayments, Groups
from aiogram.utils.markdown import hlink

from utils.constants import ADMIN_ID

router = Router()

def is_subscription_active(user_id: int, group_id: int) -> bool:
    with SessionLocal() as db_session:
        payment = db_session.query(UserPayments).filter_by(user_id=user_id, group_id=group_id).first()
        return payment is not None and payment.status == "–æ–ø–ª–∞—á–µ–Ω"


@router.callback_query(F.data.startswith("group_"))
async def check_course(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username or f"id: {user_id}"
    user_mention = hlink(username, f"tg://user?id={user_id}")
    db = SessionLocal()

    group_id = callback_query.data.split("_")[1]
    group = db.query(Groups).filter(Groups.group_id == group_id).first()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if is_subscription_active(user_id, group_id):
        expire_time = datetime.now() + timedelta(hours=24)
        new_invite_link = await callback_query.bot.create_chat_invite_link(
            group_id, expire_date=expire_time, member_limit=10
        )
        invite_url = new_invite_link.invite_link
        await callback_query.message.answer(
            f"‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫—É—Ä—Å: {group.group_name}.\n"
            f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É (—Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è 24 —á–∞—Å–∞): \n{invite_url}",
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM
    await state.update_data(group_id=group_id, group_name=group.group_name)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await callback_query.message.answer(
        "üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=keyboard
    )
    await state.set_state(CourseRegistration.waiting_for_phone)

# üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(CourseRegistration.waiting_for_phone, F.contact)
async def process_phone_number(message: Message, state: FSMContext):
    user_id = message.from_user.id
    phone_number = message.contact.phone_number

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    group_name = user_data['group_name']

    with SessionLocal() as db:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
        group = db.query(Groups).filter(Groups.group_name == group_name).first()
        if not group:
            await message.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        existing_payment = db.query(UserPayments).filter_by(user_id=user_id, group_id=group.group_id).first()
        if existing_payment:
            await message.answer("‚úÖ –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —ç—Ç—É –≥—Ä—É–ø–ø—É.")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
        payment = UserPayments(
            user_id=user_id,
            group_id=group.group_id,
            phone_number=phone_number,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            status="–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
        )
        db.add(payment)
        db.commit()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        user_mention = hlink(message.from_user.username or f"id: {user_id}", f"tg://user?id={user_id}")
        await message.bot.send_message(
            chat_id=ADMIN_ID[0],
            text=(
                f"üîî –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É:\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_mention}\n"
                f"üìö –ö—É—Ä—Å: {group_name}\n"
                f"üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}"
            ),
            reply_markup=add_user_keyboard(user_id, group.group_id),
            parse_mode="HTML"
        )
        await message.answer("‚úÖ –í–∞—à –Ω–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!")
        await state.clear()

@router.callback_query(F.data == "finished_course")
async def finished_course_handler(callback_query: CallbackQuery):
    await callback_query.answer("")
    await callback_query.message.bot.send_message(
         ADMIN_ID[0],
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.username or callback_query.from_user.id} –∑–∞–≤–µ—Ä—à–∏–ª –∫—É—Ä—Å."
    )


@router.message(Command("start"))
async def cmd_start(message: Message):
    if message.chat.type == 'private':
        await message.answer(START_MESSAGE, reply_markup=generateKeyboard())


@router.chat_member()
async def chat_member_status(event: ChatMemberUpdated):
    user_id = event.new_chat_member.user.id
    group_id = event.chat.id  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
    if not is_subscription_active(user_id, group_id):
        try:
            # –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ
            await event.bot.ban_chat_member(group_id, user_id)
            await asyncio.sleep(1)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –≥—Ä—É–ø–ø–µ {group_id}: {e}")


@router.message(Command("menu"))
async def cmd_start(message: Message):
    if message.chat.type == 'private':
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=inline_menu)


@router.callback_query(F.data == "all_courses")
async def finished_course_handler(callback_query: CallbackQuery):
    await callback_query.message.answer("–í—Å–µ –∫—É—Ä—Å—ã:", reply_markup=generateKeyboard())


@router.callback_query(F.data == "my_courses")
async def finished_course_handler(callback_query: CallbackQuery):
    await callback_query.message.answer("–ú–æ–∏ –∫—É—Ä—Å—ã:", reply_markup=getmyGroupes(callback_query.from_user.id))


@router.callback_query(F.data == "finish_course")
async def finished_course_handler(callback_query: CallbackQuery):
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏:", reply_markup=finish_course(callback_query.from_user.id))


@router.callback_query(F.data.startswith("course_"))
async def payment_handler(callback_query: CallbackQuery):
    group_id = callback_query.data.split("_")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≥—Ä—É–ø–ø—ã
    db = SessionLocal()
    group = db.query(Groups).filter(Groups.group_id == group_id).first()
    try:
        user_id = callback_query.from_user.id
        username = callback_query.from_user.username or f"id: {user_id}"
        user_mention = hlink(username, f"tg://user?id={user_id}")

        await callback_query.bot.send_message(
            chat_id=ADMIN_ID[0],
            text=(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_mention} –∑–∞–≤–µ—Ä—à–∏–ª –∫—É—Ä—Å "
                f"{group.group_name}"
            ),
            parse_mode="HTML"
        )
        await callback_query.message.answer("–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    except Exception as e:
        await callback_query.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        print(f"–û—à–∏–±–∫–∞: {e}")

