from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from database import SessionLocal, Groups, UserPayments


def getGroupes():
    db = SessionLocal()
    try:
        groups = db.query(Groups).all()
        return groups
    except Exception as e:
        print(e)
    finally:
        db.close()


def generateKeyboard() -> InlineKeyboardMarkup:
    groupes = getGroupes()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
    buttons = []

    if not groupes:
        # –ï—Å–ª–∏ –≥—Ä—É–ø–ø –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø"
        buttons.append([InlineKeyboardButton(text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø", callback_data="no_groups")])
    else:
        # –ï—Å–ª–∏ –≥—Ä—É–ø–ø—ã –µ—Å—Ç—å, —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        for i in groupes:
            buttons.append([InlineKeyboardButton(
                text=i.group_name,  # –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
                callback_data=f"group_{i.group_id}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –≥—Ä—É–ø–ø—ã –≤ callback_data
            )])

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

def makeMainAdminMenu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏", callback_data="manage_subscriptions")
        ],
        [
            InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≥—Ä—É–ø–ø—ã", callback_data="all_groups")
        ],
        [
            InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É", callback_data="add_bot_to_group")
        ],
        [
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="backToAdminMenu")
        ]
    ])

def getmyGroupes(user_id):
    db = SessionLocal()
    try:
        buttons = []
        results = db.query(UserPayments, Groups.group_name, Groups.group_id).join(Groups,
                                                                                  Groups.group_id == UserPayments.group_id).filter(
            UserPayments.user_id == user_id).all()

        groupes = []
        for payment, group_name, group_id in results:
            groupes.append({
                "group_name": group_name,
                "group_id": group_id
            })

        print(groupes)
        if not groupes:
            # –ï—Å–ª–∏ –≥—Ä—É–ø–ø –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø"
            buttons.append([InlineKeyboardButton(text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø ‚õîÔ∏è", callback_data="no_groups")])

        else:
            # –ï—Å–ª–∏ –≥—Ä—É–ø–ø—ã –µ—Å—Ç—å, —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
            for i in groupes:
                buttons.append([InlineKeyboardButton(
                    text=i["group_name"],  # –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
                    callback_data=f"group_{i['group_id']}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –≥—Ä—É–ø–ø—ã –≤ callback_data
                )])

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        return keyboard


    except Exception as e:
        print(e)
    finally:
        db.close()


def add_user_keyboard(user_id: int, group_id: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç InlineKeyboardMarkup –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É.

    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å.
    :param group_id: ID –≥—Ä—É–ø–ø—ã, –∫—É–¥–∞ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–æ–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text='‚úÖ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É',
                    callback_data=f"adduser_{user_id}_{group_id}"
                )
            ]
        ]
    )


def finish_course(user_id):
    db = SessionLocal()
    try:
        buttons = []
        results = db.query(UserPayments, Groups.group_name, Groups.group_id).join(Groups,
                                                                                  Groups.group_id == UserPayments.group_id).filter(
            UserPayments.user_id == user_id).all()

        groupes = []
        for payment, group_name, group_id in results:
            groupes.append({
                "group_name": group_name,
                "group_id": group_id
            })

        print(groupes)
        if not groupes:
            # –ï—Å–ª–∏ –≥—Ä—É–ø–ø –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø"
            buttons.append([InlineKeyboardButton(text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø", callback_data="no_groups")])

        else:
            # –ï—Å–ª–∏ –≥—Ä—É–ø–ø—ã –µ—Å—Ç—å, —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
            for i in groupes:
                buttons.append([InlineKeyboardButton(
                    text=i["group_name"],  # –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
                    callback_data=f"course_{i['group_id']}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –≥—Ä—É–ø–ø—ã –≤ callback_data
                )])

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        return keyboard


    except Exception as e:
        print(e)
    finally:
        db.close()


inline_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–í—Å–µ –∫—É—Ä—Å—ã üìã', callback_data='all_courses')],
    [InlineKeyboardButton(text='–ú–æ–∏ –∫—É—Ä—Å—ã üóùÔ∏è', callback_data='my_courses')],
    [InlineKeyboardButton(text='–ó–∞–≤–µ—Ä—à–∏–ª –∫—É—Ä—Å üéØ', callback_data='finish_course')]
])


def backToAdminMenu() -> InlineKeyboardMarkup:
    '''–§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã
     –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏'''
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏", callback_data="manage_subscriptions")
        ],
        [
            InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≥—Ä—É–ø–ø—ã", callback_data="all_groups")
        ],
        [
            InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É", callback_data="add_bot_to_group")
        ],
        [
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="backToAdminMenu")
        ]
    ])

def makeAdminSubscriptionMenu(expiring_users):

    buttons = [
        [
            InlineKeyboardButton(
                text=f"–ò—Å—Ç–∫–∞–µ—Ç {user.subscription_end_date.strftime('%Y-%m-%d')}–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è {user.user_id}",
                callback_data=f"extend_subscription_{user.user_id}"
            )
        ]
        for user in expiring_users
    ]
    buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="backToAdminMenu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)
